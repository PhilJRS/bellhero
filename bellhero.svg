<?xml version="1.0" encoding="utf-8" ?>
<svg id="drawing" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" >
  <!--script type="text/javascript" xlink:href="svg.min.js"></script-->

  <script type="text/javascript" xlink:href="https://cdn.jsdelivr.net/npm/jquery@3.7/dist/jquery.js"></script>
  <script type="text/javascript" xlink:href="https://cdn.jsdelivr.net/npm/@svgdotjs/svg.js@3.1/dist/svg.js"></script>
  <script type="text/javascript">
    <![CDATA[
      const chanson = {
        tempo : 60 ,                      // nombre de "d" par minute
        melodieNote : [0, 2, 4, 5, 6, 8], // indexé selon couleurNote
        melodie: [                        // polyphonique
          {h : [ 1 ] , d : 1},
          {h : [ 1 ] , d : 1},
          {h : [ 5 ] , d : 1},
          {h : [ 5 ] , d : 1},
          {h : [ 6 ] , d : 1},
          {h : [ 6 ] , d : 1},
          {h : [ 5 ] , d : 2},
          {h : [ 4 ] , d : 1},
          {h : [ 4 ] , d : 1},
          {h : [ 3 ] , d : 1},
          {h : [ 3 ] , d : 1},
          {h : [ 2 ] , d : 1},
          {h : [ 2 ] , d : 1},
          {h : [ 1 ] , d : 2}]
      }
      const couleurNote = [
        '#FF0000' , // Rouge            do
        '#FF4500' , // Rouge orange     do#
        '#FF6347' , // Tomate           re
        '#FF8C00' , // orange foncé     re#
        '#FFFF00' , // jaune            mi
        '#7FFF00' , // Vert chartreuse  fa
        '#6B8E23' , // Olivatre         fa#
        '#006400' , // Vert foncé       sol
        '#008080' , // Bleu sarcelle    sol#
        '#800080' , // rouge pourpre    la
        '#BC8F8F' , // Rosybrown        la#
        '#F08080' , // Corail clair     si
        '#FF0000'   // Rouge            do_haut
      ];
        
      const clockTic = 20  //pixels , la moitié du plus court intervalle de temps entre 2 notes
      var draw = SVG('#drawing').size('100%', '100%')
      const windowW = $("#drawing")[0].clientWidth 
      const windowH = $("#drawing")[0].clientHeight
      draw.rect(windowW, windowH).fill('#000')
      const noteW = Math.floor(windowW/chanson.melodieNote.length)
      const rollH = chanson.melodie.map(n =>n.d).reduce((acc, val)=>acc+val)*2*clockTic
      var nested = draw.nested()
      var roll = nested.rect(windowW, rollH).stroke({ color: '#f06', opacity: 0.6, width: 5 })
      var cursor = 0
      chanson.melodie.forEach((note, i) => {
          var noteX = (note.h[0]-1)*noteW
          var noteCouleur = couleurNote[chanson.melodieNote[note.h[0]-1]]  
          var noteY = rollH - cursor - clockTic
          cursor = cursor + note.d*clockTic*2
          console.log({  i: i, noteX: noteX , noteY: noteY , noteCouleur: noteCouleur })
          nested.rect(noteW, clockTic).move(noteX,noteY).fill(noteCouleur)
      })
      draw.rect(windowW, 10).fill('#FFF').move(0, windowH-5*clockTic)
      nested.move(0, windowH/2-rollH).animate(20000, 2000, 'now').move(0, windowH)
    ]]>
  </script>
</svg>
