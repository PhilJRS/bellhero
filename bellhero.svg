<?xml version="1.0" encoding="utf-8" ?>
<svg id="drawing"  xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1">
  <script type="text/javascript" xlink:href="https://cdn.jsdelivr.net/npm/@svgdotjs/svg.js@3.1/dist/svg.js"></script>
  <script type="text/javascript">
    <![CDATA[
  
    // format d'une chanson: un tableau de tableaux: 
    //[[notes simultanées] , durée jusquau prochain évènement]

      const chanson = [     // "Emmanuel"   polyphonique
        [[ 11 ,  4 ] , 1 ], // mesure 1
        [[  7 ,  4 ] , 1 ], // Mesure 2
        [[ 11 ,  6 ] , 1 ],
        [[ 11 ,  7 ] , 1 ],
        [[ 11 ,  7 ] , 1 ],
        [[  9 ,  4 ] , 1 ],
        [[ 12 ,  9 ] , 1 ],
        [[ 11 ,  7 ] , 1 ],
        [[  9 ,  6 ] , 1 ], // Mesure 4
        [[  7 ,  4 ] , 2 ],
        [[  7 ,  4 ] , 1 ],
        [[  9 ,  6 ] , 1 ],
        [[ 11 ,  7 ] , 1 ],
        [[  7 ,  2 ] , 1 ],
        [[  4 ,  0 ] , 1 ],
        [[  7 ,  2 ] , 1 ],
        [[  9 ,  0 ] , 1 ],
        [[  6      ] , 1 ],
        [[  4 , 11 ] , 2 ],
        [[  2 , 11 ] , 1 ],
        [[  4 , 11 ] , 2 ], // mesure 7 
        [[  9 ,  4 ] , 1 ],
        [[  9 ,  0 ] , 1 ],
        [[  4      ] , 1 ], // mesure 8
        [[  4      ] , 1 ],
        [[  6 ,  3 ] , 1 ],
        [[  7 ,  4 ] , 2 ],
    // mesure 9
        [[  6 ,  2 ] , 1 ],
        [[  4 ,  0 ] , 1 ],
        [[  2 ,  9 ] , 4 ],
        [[  7 , 11 ] , 1 ],
        [[  9 ,  2 ] , 1 ], // Mesure 11
        [[ 11 ,  2 ] , 1 ],
        [[ 11 ,  2 ] , 1 ],
        [[ 11 ,  7 ] , 1 ],
        [[  9 ,  4 ] , 1 ],
        [[ 12 ,  9 ] , 1 ],
        [[ 11 ,  7 ] , 1 ],
        [[  9 ,  6 ] , 1 ],
        [[  7 ,  2 ] , 4 ],   // Mesure 13 
        [[  2 ,  7 ] , 1 ],  // Mesure 14
        [[  2 ,  6 ] , 3 ],
        [[ 11 ,  7 ] , 1 ], // Mesure 15
        [[ 11 ,  7 ] , 3 ],
        [[ 11 ,  7 ] , 1 ], // Mesure 16
        [[  9 ,  4 ] , 1 ],
        [[ 12 ,  9 ] , 1 ],
        [[ 11 ,  7 ] , 1 ],
        [[  9 ,  6 ] , 1 ],   // Mesure 17
        [[  7 ,  4 ] , 3 ],
        [[  9 ,  6 ] , 1 ],   // Mesure 18
        [[ 11 ,  7 ] , 1 ],
        [[  7 ,  2 ] , 1 ],
        [[  4 ,  0 ] , 1 ],
        [[  7 ,  2 ] , 1 ],    // Mesure 19
        [[  9 ,  0 ] , 1 ],
        [[  6 ,  0 ] , 1 ],
        [[  4 ,  0 ] , 1 ],
        [[  2 , 11 ] , 1 ],
        [[  4 , 11 ] ,120 ] //workaround de l'ease-out indésirable + 150% (80+120 tics)
      ]

      const bpm = 40  // tempo approx en ticks per minute

      const couleurNote = [
        '#b01b2f' , // Rouge            do3
        '#d02a38' , // Rouge orange     do#
        '#df471e' , // Tomate           re
        '#e8c233' , // orange foncé     re#
        '#f3e101' , // jaune            mi
        '#8bb936' , // Vert chartreuse  fa
        '#38ac4b' , // Olivatre         fa#
        '#266353' , // Vert foncé       sol
        '#0c369c' , // Bleu sarcelle    sol#
        '#240385' , // rouge pourpre    la
        '#981f80' , // Rosybrown        la#
        '#981f80' , // Corail clair     si
        '#b01b2f'   // Rouge            do4
      ]

      const draw = SVG('#drawing').size('100%', '100%')
      draw.rect('100%', '100%').fill('#000')
      const ticsPerWH = 20
      const noteW = 100/couleurNote.length+'%'
      const duree = chanson.reduce((acc, note)=>acc+note[1],0); //durée de la chanson en tics
      const noteH = 100/(duree+1) + '%'     // en %, la note la plus courte de la chanson, 20 par écran (5%)
      const roll = draw.nested().size('100%', 100*(duree+1)/ticsPerWH +'%')
      const gradientCol = couleurNote.map( c => draw.gradient('linear', (add)=> {
               add.stop(0, c, 0); add.stop(1, c, 1); add.from(0, 0); add.to(0, 1) }))
      var cursor = 100*duree/(duree+1)    // rappel: note[0]=les voix (ou pitch), note[1]= la durée .
      const offsetVoix = 100/ couleurNote.length
      chanson.forEach ((note ,i) => {
        note[0].forEach (voix => roll.rect(noteW, noteH).move(voix*offsetVoix+'%', cursor+'%').fill(gradientCol[voix])) // gradientCol
        cursor = cursor - 100*note[1]/(duree+1)
      })
      draw.rect('100%', 10).fill('#FFF').move(0, '80%')   // "barre d'arrivée" des notes
      roll.move(0, -100*(duree-9)/ticsPerWH  +'%').animate(duree*60000/bpm, '1000','now').move(0, '100%')
      draw.on('click', () => roll.timeline()._paused ? roll.timeline().play() : roll.timeline().pause())
    ]]>
  </script>
</svg>
